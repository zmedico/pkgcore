# Copyright 2005-2012 Brian Harring <ferringb@gmail.com>: BSD/GPL2
# Copyright 2004-2005 Gentoo Foundation: GPL2

assert() {
	local pipestatus=${PIPESTATUS[*]}
	[[ -z ${pipestatus//[ 0]/} ]] || die "$@ (pipestatus: ${pipestatus})"
}

die() {
	set +x
	# if we were signaled to die...
	if [[ -n ${EBD_DISABLE_DIEFUNC} ]]; then
		return
	fi

	if [[ ${PKGCORE_NONFATAL_DIE} && $1 == "-n" ]]; then
		return 1
	fi

	local n filespacing=0 linespacing=0 sourcefile lineno
	# setup spacing to make output easier to read
	for (( n = ${#FUNCNAME[@]} - 1 ; n >= 0 ; --n )); do
		sourcefile=${BASH_SOURCE[${n}]} sourcefile=${sourcefile##*/}
		lineno=${BASH_LINENO[${n}]}
		(( filespacing < ${#sourcefile} )) && filespacing=${#sourcefile}
		(( linespacing < ${#lineno} ))     && linespacing=${#lineno}
	done

	echo >&2
	echo "!!! ERROR: ${CATEGORY}/${PF} failed." >&2
	echo "!!! die invoked from directory $(pwd)" >&2
	if [[ -z ${PKGCORE_IS_NOT_HELPER} ]]; then
		echo "!!! was running helper: ${HELPER_ERROR_PREFIX}"
	else
		__dump_trace 2 ${filespacing} ${linespacing} >&2
		echo "!!!   $(printf "%${filespacing}s" "${BASH_SOURCE[1]##*/}"), line $(printf "%${linespacing}s" "${BASH_LINENO[0]}"):  Called die" >&2
	fi
	echo "!!! The die message:" >&2
	echo "!!!  ${*:-(no error message)}" >&2
	if ${PKGCORE_DIE_OUTPUT_DETAILS-true}; then
		if [[ -n ${PKGCORE_IS_NOT_HELPER} ]]; then
			echo "!!!" >&2
			echo "!!! If you need support, post the topmost build error, and the call stack if relevant." >&2
		fi
		local hook
		for hook in ${EBUILD_DEATH_HOOKS}; do
			${hook} >&2 1>&2
		done
	fi
	echo >&2
	if [[ -n ${PKGCORE_EBUILD_PROCESS_PID} ]]; then
		if [[ -z ${PKGCORE_IS_NOT_HELPER} ]]; then
			kill -10 ${PKGCORE_EBUILD_PROCESS_PID}
		elif [[ ${BASHPID} != ${PKGCORE_EBUILD_PROCESS_PID} ]]; then
			kill -s SIGTERM ${PKGCORE_EBUILD_PROCESS_PID}
		fi
	fi
	exit 1
}

# usage- first arg is the number of funcs on the stack to ignore.
# defaults to 1 (ignoring __dump_trace)
# whitespacing for filenames
# whitespacing for line numbers
__dump_trace() {
	declare -i strip=1

	if [[ -n $1 ]]; then
		strip=$(( $1 ))
	fi
	echo "!!! Call stack:"
	local filespacing=$2 linespacing=$3
	local n p
	for (( n = ${#FUNCNAME[@]} - 1, p = ${#BASH_ARGV[@]} ; n > ${strip} ; n-- )); do
		local funcname=${FUNCNAME[${n} - 1]}
		local sourcefile=$(basename ${BASH_SOURCE[${n}]})
		local lineno=${BASH_LINENO[${n} - 1]}
		# Display function arguments
		local args= newargs=
		local j
		if [[ -n ${BASH_ARGV[@]} ]]; then
			for (( j = 0 ; j < ${BASH_ARGC[${n} - 1]} ; ++j )); do
				newarg=${BASH_ARGV[$(( p - j - 1 ))]}
				args="${args:+${args} }'${newarg}'"
			done
			(( p -= ${BASH_ARGC[${n} - 1]} ))
		fi
		echo "!!!   $(printf "%${filespacing}s" "${sourcefile}"), line $(printf "%${linespacing}s" "${lineno}"):  Called ${funcname}${args:+ ${args}}"
	done
}

__helper_exit() {
	[[ $1 == 0 ]] && exit 0
	if ${PKGCORE_NONFATAL_HELPER}; then
		echo "WARNING: exitcode $1 from ${HELPER_ERROR_PREFIX}" >&2
		exit $1
	fi
	if [[ -z $2 ]]; then
		die "returned error $1"
	fi
	die "exitcode $1: $2"
}

__helper_died() {
	die "got $*";
}

__helper_check_exit() {
	[[ $1 == 0 ]] && return
	shift
	__helper_exit "$@"
}

:
